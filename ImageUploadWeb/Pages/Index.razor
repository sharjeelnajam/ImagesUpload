@page "/"
@using ImageUploadWeb.Models
@using ImageUploadWeb.Services
@inject ICustomerService CustomerService
@inject NavigationManager Navigation
@inject ILogger<Index> Logger

<PageTitle>Image Upload System</PageTitle>

<div class="hero-section">
    <div class="hero-content">
        <h1>Image Upload System</h1>
        <p class="hero-description">
            Manage customer profiles with image galleries. Upload, view, and organize images 
            with our simple and intuitive interface.
        </p>
        <div class="hero-actions">
            <button class="btn btn-primary btn-lg" @onclick="NavigateToCustomers">
                👥 Manage Customers
            </button>
            <button class="btn btn-outline-primary btn-lg" @onclick="NavigateToImageUpload">
                📷 Upload Images
            </button>
        </div>
    </div>
</div>

<div class="features-section">
    <div class="container">
        <h2 class="section-title">Key Features</h2>
        <div class="features-grid">
            <div class="feature-card">
                <div class="feature-icon">👥</div>
                <h3>Customer Management</h3>
                <p>Create, edit, and manage customer profiles with complete contact information.</p>
            </div>
            <div class="feature-card">
                <div class="feature-icon">📷</div>
                <h3>Image Upload</h3>
                <p>Upload multiple images per customer with support for JPEG, PNG, GIF, and WebP formats.</p>
            </div>
            <div class="feature-card">
                <div class="feature-icon">🖼️</div>
                <h3>Image Gallery</h3>
                <p>View uploaded images in a responsive gallery with delete functionality.</p>
            </div>
            <div class="feature-card">
                <div class="feature-icon">🔒</div>
                <h3>Secure Storage</h3>
                <p>Images are securely stored as Base64 data in the database with size limits.</p>
            </div>
        </div>
    </div>
</div>

@if (RecentCustomers.Any())
{
    <div class="recent-customers-section">
        <div class="container">
            <h2 class="section-title">Recent Customers</h2>
            <div class="customers-grid">
                @foreach (var customer in RecentCustomers.Take(6))
                {
                    <div class="customer-card" @onclick="() => NavigateToCustomer(customer.Id)">
                        <div class="customer-avatar">
                            @if (customer.Images.Any())
                            {
                                <img src="@GetCustomerAvatar(customer)" alt="Avatar" class="avatar-image" />
                            }
                            else
                            {
                                <div class="avatar-placeholder">
                                    @GetInitials(customer.FirstName, customer.LastName)
                                </div>
                            }
                        </div>
                        <div class="customer-info">
                            <h4>@customer.FirstName @customer.LastName</h4>
                            <p>@customer.Email</p>
                            <span class="image-count">@customer.Images.Count images</span>
                        </div>
                    </div>
                }
            </div>
        </div>
    </div>
}

<style>
    .hero-section {
        background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
        color: white;
        padding: 80px 0;
        text-align: center;
    }

    .hero-content {
        max-width: 800px;
        margin: 0 auto;
        padding: 0 20px;
    }

    .hero-content h1 {
        font-size: 3.5em;
        margin-bottom: 20px;
        font-weight: 700;
    }

    .hero-description {
        font-size: 1.3em;
        margin-bottom: 40px;
        opacity: 0.9;
        line-height: 1.6;
    }

    .hero-actions {
        display: flex;
        gap: 20px;
        justify-content: center;
        flex-wrap: wrap;
    }

    .btn {
        padding: 15px 30px;
        border: none;
        border-radius: 8px;
        cursor: pointer;
        font-size: 1.1em;
        font-weight: 600;
        text-decoration: none;
        display: inline-block;
        transition: all 0.3s ease;
    }

    .btn-primary {
        background-color: #007bff;
        color: white;
    }

    .btn-primary:hover {
        background-color: #0056b3;
        transform: translateY(-2px);
    }

    .btn-outline-primary {
        background-color: transparent;
        color: white;
        border: 2px solid white;
    }

    .btn-outline-primary:hover {
        background-color: white;
        color: #007bff;
    }

    .features-section {
        padding: 80px 0;
        background-color: #f8f9fa;
    }

    .container {
        max-width: 1200px;
        margin: 0 auto;
        padding: 0 20px;
    }

    .section-title {
        text-align: center;
        font-size: 2.5em;
        margin-bottom: 50px;
        color: #333;
    }

    .features-grid {
        display: grid;
        grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
        gap: 30px;
    }

    .feature-card {
        background: white;
        padding: 40px 30px;
        border-radius: 12px;
        text-align: center;
        box-shadow: 0 4px 6px rgba(0,0,0,0.1);
        transition: transform 0.3s ease;
    }

    .feature-card:hover {
        transform: translateY(-5px);
    }

    .feature-icon {
        font-size: 3em;
        margin-bottom: 20px;
    }

    .feature-card h3 {
        font-size: 1.5em;
        margin-bottom: 15px;
        color: #333;
    }

    .feature-card p {
        color: #666;
        line-height: 1.6;
    }

    .recent-customers-section {
        padding: 80px 0;
        background: white;
    }

    .customers-grid {
        display: grid;
        grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
        gap: 20px;
    }

    .customer-card {
        background: white;
        border: 1px solid #dee2e6;
        border-radius: 8px;
        padding: 20px;
        text-align: center;
        cursor: pointer;
        transition: all 0.3s ease;
        box-shadow: 0 2px 4px rgba(0,0,0,0.1);
    }

    .customer-card:hover {
        transform: translateY(-3px);
        box-shadow: 0 4px 8px rgba(0,0,0,0.15);
    }

    .customer-avatar {
        margin-bottom: 15px;
    }

    .avatar-image {
        width: 60px;
        height: 60px;
        border-radius: 50%;
        object-fit: cover;
    }

    .avatar-placeholder {
        width: 60px;
        height: 60px;
        border-radius: 50%;
        background: #007bff;
        color: white;
        display: flex;
        align-items: center;
        justify-content: center;
        font-weight: bold;
        font-size: 1.2em;
        margin: 0 auto;
    }

    .customer-info h4 {
        margin: 0 0 5px 0;
        color: #333;
        font-size: 1.1em;
    }

    .customer-info p {
        margin: 0 0 10px 0;
        color: #666;
        font-size: 0.9em;
    }

    .image-count {
        background: #e9ecef;
        color: #495057;
        padding: 4px 8px;
        border-radius: 12px;
        font-size: 0.8em;
        font-weight: 500;
    }

    @@media (max-width: 768px) {
        .hero-content h1 {
            font-size: 2.5em;
        }
        
        .hero-description {
            font-size: 1.1em;
        }
        
        .hero-actions {
            flex-direction: column;
            align-items: center;
        }
        
        .features-grid {
            grid-template-columns: 1fr;
        }
    }
</style>

@code {
    private List<Customer> RecentCustomers = new();

    protected override async Task OnInitializedAsync()
    {
        await LoadRecentCustomers();
    }

    private async Task LoadRecentCustomers()
    {
        try
        {
            var response = await CustomerService.GetCustomersAsync();
            if (response.Success && response.Data != null)
            {
                RecentCustomers = response.Data.OrderByDescending(c => c.CreatedAt).ToList();
            }
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error loading recent customers");
        }
    }

    private void NavigateToCustomers()
    {
        Navigation.NavigateTo("/customers");
    }

    private void NavigateToImageUpload()
    {
        Navigation.NavigateTo("/image-test");
    }

    private void NavigateToCustomer(int customerId)
    {
        Navigation.NavigateTo($"/customer/{customerId}");
    }

    private string GetCustomerAvatar(Customer customer)
    {
        if (customer.Images.Any())
        {
            var firstImage = customer.Images.First();
            return $"/api/Image/serve/{firstImage.Id}";
        }
        return string.Empty;
    }

    private string GetInitials(string firstName, string lastName)
    {
        return $"{firstName[0]}{lastName[0]}".ToUpper();
    }
}