@page "/image-test"
@using ImageUploadWeb.Models
@using ImageUploadWeb.Services
@using ImageUploadWeb.Components
@inject ICustomerService CustomerService
@inject IImageService ImageService
@inject ILogger<ImageTest> Logger

<PageTitle>Image Upload</PageTitle>

<div class="image-upload-page">
    <div class="page-header">
        <h1>Image Upload</h1>
        <p>Upload and manage customer images</p>
    </div>

    @if (IsLoading)
    {
        <div class="loading-container">
            <div class="spinner"></div>
            <p>Loading customers...</p>
        </div>
    }
    else if (!Customers.Any())
    {
        <div class="no-customers">
            <div class="no-customers-icon">ðŸ‘¥</div>
            <h3>No customers found</h3>
            <p>Please add some customers first to upload images.</p>
            <button class="btn btn-primary" @onclick="NavigateToCustomers">
                Go to Customers
            </button>
        </div>
    }
    else
    {
        <div class="upload-sections">
            <!-- Customer Selection -->
            <div class="upload-section">
                <h3>Select Customer</h3>
                <div class="customer-selector">
                    <select @onchange="OnCustomerSelected" class="form-control">
                        <option value="">-- Select a customer --</option>
                        @foreach (var customer in Customers)
                        {
                            <option value="@customer.Id">@customer.FirstName @customer.LastName</option>
                        }
                    </select>
                </div>
            </div>

            @if (SelectedCustomerId > 0)
            {
                <!-- Image Upload -->
                <div class="upload-section">
                    <h3>Upload Images</h3>
                    <p>Select multiple images to upload. Supports JPEG, PNG, GIF, and WebP formats up to 5MB each.</p>
                    
                    <ImageUpload CustomerId="@SelectedCustomerId" 
                                OnImagesUploaded="OnImagesUploaded" 
                                OnImageCountChanged="OnImageCountChanged" />
                </div>

                <!-- Image Gallery -->
                <div class="upload-section">
                    <h3>Uploaded Images</h3>
                <ImageGallery Images="@CustomerImages" 
                            OnImageDeleted="OnImageDeleted" />
                </div>
            }
        </div>
    }
</div>

<style>
    .image-upload-page {
        max-width: 1200px;
        margin: 0 auto;
        padding: 20px;
    }

    .page-header {
        text-align: center;
        margin-bottom: 30px;
        padding-bottom: 20px;
        border-bottom: 2px solid #dee2e6;
    }

    .page-header h1 {
        margin: 0 0 10px 0;
        color: #333;
    }

    .page-header p {
        margin: 0;
        color: #666;
        font-size: 1.1em;
    }

    .loading-container {
        display: flex;
        flex-direction: column;
        align-items: center;
        justify-content: center;
        padding: 40px;
    }

    .spinner {
        width: 40px;
        height: 40px;
        border: 4px solid #f3f3f3;
        border-top: 4px solid #007bff;
        border-radius: 50%;
        animation: spin 1s linear infinite;
        margin-bottom: 20px;
    }

    @@keyframes spin {
        0% { transform: rotate(0deg); }
        100% { transform: rotate(360deg); }
    }

    .no-customers {
        text-align: center;
        padding: 60px 20px;
    }

    .no-customers-icon {
        font-size: 4em;
        margin-bottom: 20px;
    }

    .no-customers h3 {
        color: #333;
        margin-bottom: 10px;
    }

    .no-customers p {
        color: #666;
        margin-bottom: 30px;
    }

    .upload-sections {
        display: flex;
        flex-direction: column;
        gap: 30px;
    }

    .upload-section {
        background: white;
        border: 1px solid #dee2e6;
        border-radius: 8px;
        padding: 25px;
        box-shadow: 0 2px 4px rgba(0,0,0,0.1);
    }

    .upload-section h3 {
        margin: 0 0 15px 0;
        color: #333;
        font-size: 1.3em;
    }

    .upload-section p {
        margin: 0 0 20px 0;
        color: #666;
        line-height: 1.5;
    }

    .customer-selector {
        max-width: 400px;
    }

    .form-control {
        width: 100%;
        padding: 10px 15px;
        border: 1px solid #ced4da;
        border-radius: 4px;
        font-size: 1em;
        background-color: white;
    }

    .form-control:focus {
        outline: none;
        border-color: #007bff;
        box-shadow: 0 0 0 2px rgba(0,123,255,0.25);
    }

    .btn {
        padding: 10px 20px;
        border: none;
        border-radius: 4px;
        cursor: pointer;
        font-size: 1em;
        text-decoration: none;
        display: inline-block;
        transition: background-color 0.3s ease;
    }

    .btn-primary {
        background-color: #007bff;
        color: white;
    }

    .btn-primary:hover {
        background-color: #0056b3;
    }

    @@media (max-width: 768px) {
        .image-upload-page {
            padding: 10px;
        }
        
        .upload-section {
            padding: 20px;
        }
    }
</style>

@code {
    private List<Customer> Customers = new();
    private List<CustomerImage> CustomerImages = new();
    private int SelectedCustomerId = 0;
    private int ImageCount = 0;
    private bool IsLoading = true;

    protected override async Task OnInitializedAsync()
    {
        await LoadTestData();
    }

    private async Task LoadTestData()
    {
        try
        {
            IsLoading = true;
            
            // Load customers
            var customersResponse = await CustomerService.GetCustomersAsync();
            if (customersResponse.Success && customersResponse.Data != null)
            {
                Customers = customersResponse.Data;
            }

            // Create a test customer if none exist
            if (!Customers.Any())
            {
                var testCustomer = new Customer
                {
                    FirstName = "Test",
                    LastName = "Customer",
                    Email = "test@example.com",
                    Phone = "123-456-7890"
                };

                var createResponse = await CustomerService.CreateCustomerAsync(testCustomer);
                if (createResponse.Success && createResponse.Data != null)
                {
                    Customers.Add(createResponse.Data);
                }
            }
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error loading test data");
        }
        finally
        {
            IsLoading = false;
        }
    }

    private async Task OnCustomerSelected(ChangeEventArgs e)
    {
        if (int.TryParse(e.Value?.ToString(), out int customerId))
        {
            SelectedCustomerId = customerId;
            await LoadCustomerImages();
        }
    }

    private async Task LoadCustomerImages()
    {
        try
        {
            var response = await ImageService.GetCustomerImagesAsync(SelectedCustomerId);
            if (response.Success && response.Data != null)
            {
                CustomerImages = response.Data;
                ImageCount = CustomerImages.Count;
            }
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error loading customer images");
        }
    }

    private async Task OnImagesUploaded(List<CustomerImage> uploadedImages)
    {
        CustomerImages.AddRange(uploadedImages);
        await LoadCustomerImages(); // Refresh the list
        StateHasChanged();
    }

    private async Task OnImageCountChanged(int newCount)
    {
        ImageCount = newCount;
        StateHasChanged();
    }

    private async Task OnImageDeleted(CustomerImage deletedImage)
    {
        if (deletedImage != null)
        {
            CustomerImages.Remove(deletedImage);
            ImageCount = Math.Max(0, ImageCount - 1);
            StateHasChanged();
        }
    }

    private void NavigateToCustomers()
    {
        // This would navigate to customers page
        // For now, just refresh the current page
        StateHasChanged();
    }
}