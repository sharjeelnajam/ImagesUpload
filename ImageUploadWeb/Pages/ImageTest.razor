@page "/image-test"
@using ImageUploadWeb.Models
@using ImageUploadWeb.Services
@using ImageUploadWeb.Components
@inject IImageService ImageService
@inject ICustomerService CustomerService
@inject ILogger<ImageTest> Logger

<PageTitle>Image Upload Test</PageTitle>

<div class="test-page">
    <h1>Image Upload Test Page</h1>
    <p>This page demonstrates the image upload and gallery functionality.</p>

    @if (IsLoading)
    {
        <div class="loading">
            <div class="spinner"></div>
            <p>Loading test data...</p>
        </div>
    }
    else
    {
        <div class="test-sections">
            <!-- Test Customer Selection -->
            <div class="test-section">
                <h3>Select Test Customer</h3>
                <div class="customer-selector">
                    <select @onchange="OnCustomerSelected" class="form-control">
                        <option value="">-- Select a customer --</option>
                        @foreach (var customer in Customers)
                        {
                            <option value="@customer.Id">@customer.FirstName @customer.LastName</option>
                        }
                    </select>
                </div>
            </div>

            @if (SelectedCustomerId > 0)
            {
                <!-- Image Upload Test -->
                <div class="test-section">
                    <h3>Simple Image Upload</h3>
                    <p><strong>Instructions:</strong> Click the file input below to select multiple images. Supports JPEG, PNG, GIF, and WebP formats up to 5MB each.</p>
                    
                    <ImageUpload CustomerId="@SelectedCustomerId" 
                                OnImagesUploaded="OnImagesUploaded" 
                                OnImageCountChanged="OnImageCountChanged" />
                </div>

                <!-- Image Gallery Test -->
                <div class="test-section">
                    <h3>Image Gallery Test</h3>
                    <ImageGallery Images="@CustomerImages" 
                                 OnImageDeleted="OnImageDeleted" />
                </div>

                <!-- Test Results -->
                <div class="test-section">
                    <h3>Test Results</h3>
                    <div class="test-results">
                        <div class="result-item">
                            <strong>Customer ID:</strong> @SelectedCustomerId
                        </div>
                        <div class="result-item">
                            <strong>Image Count:</strong> @ImageCount / 10
                        </div>
                        <div class="result-item">
                            <strong>Can Add More:</strong> @(ImageCount < 10 ? "Yes" : "No")
                        </div>
                        <div class="result-item">
                            <strong>Last Upload:</strong> @(LastUploadTime?.ToString("yyyy-MM-dd HH:mm:ss") ?? "None")
                        </div>
                    </div>
                </div>
            }
        </div>
    }
</div>

<style>
    .test-page {
        max-width: 1200px;
        margin: 0 auto;
        padding: 20px;
    }

    .test-page h1 {
        color: #333;
        margin-bottom: 10px;
    }

    .test-page p {
        color: #666;
        margin-bottom: 30px;
    }

    .loading {
        display: flex;
        flex-direction: column;
        align-items: center;
        justify-content: center;
        padding: 60px 20px;
        text-align: center;
    }

    .spinner {
        width: 40px;
        height: 40px;
        border: 4px solid #f3f3f3;
        border-top: 4px solid #007bff;
        border-radius: 50%;
        animation: spin 1s linear infinite;
        margin-bottom: 20px;
    }

    @@keyframes spin {
        0% { transform: rotate(0deg); }
        100% { transform: rotate(360deg); }
    }

    .test-sections {
        display: flex;
        flex-direction: column;
        gap: 30px;
    }

    .test-section {
        background: #f8f9fa;
        padding: 20px;
        border-radius: 8px;
        border: 1px solid #dee2e6;
    }

    .test-section h3 {
        margin: 0 0 15px 0;
        color: #333;
        font-size: 1.2em;
    }

    .customer-selector {
        max-width: 300px;
    }

    .form-control {
        width: 100%;
        padding: 8px 12px;
        border: 1px solid #ced4da;
        border-radius: 4px;
        font-size: 14px;
    }

    .form-control:focus {
        outline: none;
        border-color: #007bff;
        box-shadow: 0 0 0 2px rgba(0,123,255,0.25);
    }

    .test-results {
        display: grid;
        grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
        gap: 15px;
    }

    .result-item {
        background: white;
        padding: 15px;
        border-radius: 6px;
        border: 1px solid #e9ecef;
    }

    .result-item strong {
        color: #333;
        display: block;
        margin-bottom: 5px;
    }

    /* Responsive Design */
    @@media (max-width: 768px) {
        .test-results {
            grid-template-columns: 1fr;
        }
    }
</style>

@code {
    private List<Customer> Customers = new();
    private List<CustomerImage> CustomerImages = new();
    private int SelectedCustomerId = 0;
    private int ImageCount = 0;
    private bool IsLoading = true;
    private DateTime? LastUploadTime = null;

    protected override async Task OnInitializedAsync()
    {
        await LoadTestData();
    }

    private async Task LoadTestData()
    {
        try
        {
            IsLoading = true;
            
            // Load customers
            var customersResponse = await CustomerService.GetCustomersAsync();
            if (customersResponse.Success && customersResponse.Data != null)
            {
                Customers = customersResponse.Data;
            }

            // Create a test customer if none exist
            if (!Customers.Any())
            {
                var testCustomer = new Customer
                {
                    FirstName = "Test",
                    LastName = "Customer",
                    Email = "test@example.com",
                    Phone = "123-456-7890"
                };

                var createResponse = await CustomerService.CreateCustomerAsync(testCustomer);
                if (createResponse.Success && createResponse.Data != null)
                {
                    Customers.Add(createResponse.Data);
                }
            }
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error loading test data");
        }
        finally
        {
            IsLoading = false;
        }
    }

    private async Task OnCustomerSelected(ChangeEventArgs e)
    {
        if (int.TryParse(e.Value?.ToString(), out int customerId))
        {
            SelectedCustomerId = customerId;
            await LoadCustomerImages();
        }
    }

    private async Task LoadCustomerImages()
    {
        try
        {
            var imagesResponse = await ImageService.GetCustomerImagesAsync(SelectedCustomerId);
            if (imagesResponse.Success && imagesResponse.Data != null)
            {
                CustomerImages = imagesResponse.Data;
            }

            var countResponse = await ImageService.GetImageCountAsync(SelectedCustomerId);
            if (countResponse.Success && countResponse.Data != null)
            {
                var countData = countResponse.Data;
                var countProperty = countData.GetType().GetProperty("CurrentCount");
                if (countProperty != null)
                {
                    ImageCount = (int)countProperty.GetValue(countData)!;
                }
            }
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error loading customer images for customer {CustomerId}", SelectedCustomerId);
        }
    }

    private async Task OnImagesUploaded(List<CustomerImage> uploadedImages)
    {
        CustomerImages.AddRange(uploadedImages);
        LastUploadTime = DateTime.Now;
        await LoadCustomerImages(); // Refresh to get updated data
        StateHasChanged();
    }

    private async Task OnImageCountChanged(int newCount)
    {
        ImageCount = newCount;
        StateHasChanged();
    }

    private async Task OnImageDeleted(CustomerImage deletedImage)
    {
        CustomerImages.Remove(deletedImage);
        ImageCount = Math.Max(0, ImageCount - 1);
        StateHasChanged();
    }

}
