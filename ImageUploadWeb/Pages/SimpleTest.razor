@page "/simple-test"
@using ImageUploadWeb.Models
@using ImageUploadWeb.Services
@inject IImageService ImageService
@inject ICustomerService CustomerService

<h3>Simple API Test</h3>

<div class="test-section">
    <h4>Test 1: Check API Connection</h4>
    <button @onclick="TestApiConnection" class="btn btn-primary">Test API</button>
    <p>@ApiStatus</p>
</div>

<div class="test-section">
    <h4>Test 2: Get Customers</h4>
    <button @onclick="TestGetCustomers" class="btn btn-primary">Get Customers</button>
    <p>@CustomerStatus</p>
    @if (Customers.Any())
    {
        <ul>
            @foreach (var customer in Customers)
            {
                <li>ID: @customer.Id - @customer.FirstName @customer.LastName</li>
            }
        </ul>
    }
</div>

<div class="test-section">
    <h4>Test 3: Create Test Customer</h4>
    <button @onclick="CreateTestCustomer" class="btn btn-success">Create Test Customer</button>
    <p>@CreateStatus</p>
</div>

@code {
    private string ApiStatus = "Not tested";
    private string CustomerStatus = "Not tested";
    private string CreateStatus = "Not tested";
    private List<Customer> Customers = new();

    private async Task TestApiConnection()
    {
        try
        {
            // Try to get image count for customer 1
            var response = await ImageService.GetImageCountAsync(1);
            ApiStatus = $"API Response: Success={response.Success}, Message={response.Message}";
        }
        catch (Exception ex)
        {
            ApiStatus = $"API Error: {ex.Message}";
        }
    }

    private async Task TestGetCustomers()
    {
        try
        {
            var response = await CustomerService.GetCustomersAsync();
            if (response.Success && response.Data != null)
            {
                Customers = response.Data;
                CustomerStatus = $"Found {Customers.Count} customers";
            }
            else
            {
                CustomerStatus = $"Failed: {response.Message}";
            }
        }
        catch (Exception ex)
        {
            CustomerStatus = $"Error: {ex.Message}";
        }
    }

    private async Task CreateTestCustomer()
    {
        try
        {
            var customer = new Customer
            {
                FirstName = "Test",
                LastName = "Customer",
                Email = "test@example.com",
                Phone = "123-456-7890"
            };

            var response = await CustomerService.CreateCustomerAsync(customer);
            if (response.Success)
            {
                CreateStatus = "Test customer created successfully";
                await TestGetCustomers(); // Refresh the list
            }
            else
            {
                CreateStatus = $"Failed: {response.Message}";
            }
        }
        catch (Exception ex)
        {
            CreateStatus = $"Error: {ex.Message}";
        }
    }
}
