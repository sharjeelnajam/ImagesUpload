@page "/customer/{CustomerId:int}"
@using ImageUploadWeb.Models
@using ImageUploadWeb.Services
@using ImageUploadWeb.Components
@inject ICustomerService CustomerService
@inject IImageService ImageService
@inject NavigationManager Navigation
@inject ILogger<CustomerProfile> Logger

<PageTitle>Customer Profile - @(Customer?.FirstName ?? "Loading...")</PageTitle>

@if (IsLoading)
{
    <div class="loading-container">
        <div class="spinner"></div>
        <p>Loading customer profile...</p>
    </div>
}
else if (Customer == null)
{
    <div class="error-container">
        <h3>Customer Not Found</h3>
        <p>The requested customer could not be found.</p>
        <button class="btn btn-primary" @onclick="NavigateToCustomers">
            Back to Customers
        </button>
    </div>
}
else
{
    <div class="customer-profile">
        <!-- Customer Header -->
        <div class="customer-header">
            <div class="customer-info">
                <h2>@Customer.FirstName @Customer.LastName</h2>
                <div class="customer-details">
                    @if (!string.IsNullOrEmpty(Customer.Email))
                    {
                        <div class="detail-item">
                            <i class="detail-icon">üìß</i>
                            <span>@Customer.Email</span>
                        </div>
                    }
                    @if (!string.IsNullOrEmpty(Customer.Phone))
                    {
                        <div class="detail-item">
                            <i class="detail-icon">üìû</i>
                            <span>@Customer.Phone</span>
                        </div>
                    }
                    <div class="detail-item">
                        <i class="detail-icon">üìÖ</i>
                        <span>Created: @Customer.CreatedAt.ToString("MMM dd, yyyy")</span>
                    </div>
                </div>
            </div>
            <div class="customer-actions">
                <button class="btn btn-outline-primary" @onclick="EditCustomer">
                    ‚úèÔ∏è Edit Profile
                </button>
                <button class="btn btn-outline-secondary" @onclick="NavigateToCustomers">
                    ‚Üê Back to Customers
                </button>
            </div>
        </div>

        <!-- Image Management Section -->
        <div class="image-management-section">
            <div class="section-header">
                <h3>Image Gallery</h3>
                <div class="image-stats">
                    <span class="badge @(ImageCount >= 10 ? "badge-danger" : "badge-info")">
                        @ImageCount / 10 images
                    </span>
                </div>
            </div>

            <!-- Image Upload Component -->
            <ImageUpload CustomerId="@CustomerId" 
                        OnImagesUploaded="OnImagesUploaded" 
                        OnImageCountChanged="OnImageCountChanged" />

            <!-- Image Gallery Component -->
            <ImageGallery Images="@CustomerImages" 
                         OnImageDeleted="OnImageDeleted" />
        </div>
    </div>
}

<!-- Edit Customer Modal -->
@if (ShowEditModal)
{
    <div class="modal-overlay" @onclick="CloseEditModal">
        <div class="modal-content" @onclick:stopPropagation="true">
            <div class="modal-header">
                <h4>Edit Customer Profile</h4>
                <button class="modal-close" @onclick="CloseEditModal">√ó</button>
            </div>
            <div class="modal-body">
                <EditForm Model="@EditCustomerModel" OnValidSubmit="SaveCustomer">
                    <DataAnnotationsValidator />
                    
                    <div class="form-group">
                        <label for="firstName">First Name</label>
                        <InputText id="firstName" @bind-Value="EditCustomerModel.FirstName" class="form-control" />
                        <ValidationMessage For="@(() => EditCustomerModel.FirstName)" />
                    </div>

                    <div class="form-group">
                        <label for="lastName">Last Name</label>
                        <InputText id="lastName" @bind-Value="EditCustomerModel.LastName" class="form-control" />
                        <ValidationMessage For="@(() => EditCustomerModel.LastName)" />
                    </div>

                    <div class="form-group">
                        <label for="email">Email</label>
                        <InputText id="email" @bind-Value="EditCustomerModel.Email" class="form-control" />
                        <ValidationMessage For="@(() => EditCustomerModel.Email)" />
                    </div>

                    <div class="form-group">
                        <label for="phone">Phone</label>
                        <InputText id="phone" @bind-Value="EditCustomerModel.Phone" class="form-control" />
                        <ValidationMessage For="@(() => EditCustomerModel.Phone)" />
                    </div>

                    <div class="form-actions">
                        <button type="submit" class="btn btn-primary" disabled="@IsSaving">
                            @(IsSaving ? "Saving..." : "Save Changes")
                        </button>
                        <button type="button" class="btn btn-secondary" @onclick="CloseEditModal">
                            Cancel
                        </button>
                    </div>
                </EditForm>
            </div>
        </div>
    </div>
}

<style>
    .loading-container {
        display: flex;
        flex-direction: column;
        align-items: center;
        justify-content: center;
        padding: 60px 20px;
        text-align: center;
    }

    .spinner {
        width: 40px;
        height: 40px;
        border: 4px solid #f3f3f3;
        border-top: 4px solid #007bff;
        border-radius: 50%;
        animation: spin 1s linear infinite;
        margin-bottom: 20px;
    }

    @@keyframes spin {
        0% { transform: rotate(0deg); }
        100% { transform: rotate(360deg); }
    }

    .error-container {
        text-align: center;
        padding: 60px 20px;
    }

    .error-container h3 {
        color: #dc3545;
        margin-bottom: 15px;
    }

    .customer-profile {
        max-width: 1200px;
        margin: 0 auto;
        padding: 20px;
    }

    .customer-header {
        display: flex;
        justify-content: space-between;
        align-items: flex-start;
        margin-bottom: 30px;
        padding: 20px;
        background: #f8f9fa;
        border-radius: 10px;
        box-shadow: 0 2px 4px rgba(0,0,0,0.1);
    }

    .customer-info h2 {
        margin: 0 0 15px 0;
        color: #333;
    }

    .customer-details {
        display: flex;
        flex-direction: column;
        gap: 8px;
    }

    .detail-item {
        display: flex;
        align-items: center;
        gap: 8px;
        color: #666;
    }

    .detail-icon {
        font-size: 1.1em;
    }

    .customer-actions {
        display: flex;
        flex-direction: column;
        gap: 10px;
    }

    .image-management-section {
        background: white;
        border-radius: 10px;
        padding: 20px;
        box-shadow: 0 2px 4px rgba(0,0,0,0.1);
    }

    .section-header {
        display: flex;
        justify-content: space-between;
        align-items: center;
        margin-bottom: 20px;
        padding-bottom: 15px;
        border-bottom: 1px solid #dee2e6;
    }

    .section-header h3 {
        margin: 0;
        color: #333;
    }

    .image-stats .badge {
        font-size: 0.9em;
        padding: 5px 10px;
    }

    .badge-info {
        background-color: #17a2b8;
        color: white;
    }

    .badge-danger {
        background-color: #dc3545;
        color: white;
    }

    /* Modal Styles */
    .modal-overlay {
        position: fixed;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        background: rgba(0,0,0,0.5);
        display: flex;
        align-items: center;
        justify-content: center;
        z-index: 1000;
    }

    .modal-content {
        background: white;
        border-radius: 8px;
        max-width: 500px;
        width: 90%;
        max-height: 90vh;
        overflow-y: auto;
    }

    .modal-header {
        display: flex;
        justify-content: space-between;
        align-items: center;
        padding: 20px;
        border-bottom: 1px solid #dee2e6;
    }

    .modal-header h4 {
        margin: 0;
        color: #333;
    }

    .modal-close {
        background: none;
        border: none;
        font-size: 24px;
        cursor: pointer;
        color: #666;
        padding: 0;
        width: 30px;
        height: 30px;
        display: flex;
        align-items: center;
        justify-content: center;
    }

    .modal-close:hover {
        color: #333;
    }

    .modal-body {
        padding: 20px;
    }

    .form-group {
        margin-bottom: 20px;
    }

    .form-group label {
        display: block;
        margin-bottom: 5px;
        font-weight: 500;
        color: #333;
    }

    .form-control {
        width: 100%;
        padding: 8px 12px;
        border: 1px solid #ced4da;
        border-radius: 4px;
        font-size: 14px;
    }

    .form-control:focus {
        outline: none;
        border-color: #007bff;
        box-shadow: 0 0 0 2px rgba(0,123,255,0.25);
    }

    .form-actions {
        display: flex;
        gap: 10px;
        justify-content: flex-end;
        margin-top: 30px;
    }

    .btn {
        padding: 8px 16px;
        border: none;
        border-radius: 4px;
        cursor: pointer;
        font-size: 14px;
        text-decoration: none;
        display: inline-block;
        text-align: center;
        transition: background-color 0.3s ease;
    }

    .btn-primary {
        background-color: #007bff;
        color: white;
    }

    .btn-primary:hover:not(:disabled) {
        background-color: #0056b3;
    }

    .btn-secondary {
        background-color: #6c757d;
        color: white;
    }

    .btn-secondary:hover {
        background-color: #545b62;
    }

    .btn-outline-primary {
        background-color: transparent;
        color: #007bff;
        border: 1px solid #007bff;
    }

    .btn-outline-primary:hover {
        background-color: #007bff;
        color: white;
    }

    .btn-outline-secondary {
        background-color: transparent;
        color: #6c757d;
        border: 1px solid #6c757d;
    }

    .btn-outline-secondary:hover {
        background-color: #6c757d;
        color: white;
    }

    .btn:disabled {
        opacity: 0.6;
        cursor: not-allowed;
    }

    .validation-message {
        color: #dc3545;
        font-size: 12px;
        margin-top: 5px;
    }

    /* Responsive Design */
    @@media (max-width: 768px) {
        .customer-header {
            flex-direction: column;
            gap: 20px;
        }

        .customer-actions {
            flex-direction: row;
            justify-content: flex-start;
        }

        .section-header {
            flex-direction: column;
            align-items: flex-start;
            gap: 10px;
        }
    }
</style>

@code {
    [Parameter] public int CustomerId { get; set; }

    private Customer? Customer;
    private List<CustomerImage> CustomerImages = new();
    private int ImageCount = 0;
    private bool IsLoading = true;
    private bool ShowEditModal = false;
    private bool IsSaving = false;
    private Customer EditCustomerModel = new();

    protected override async Task OnInitializedAsync()
    {
        await LoadCustomerData();
    }

    private async Task LoadCustomerData()
    {
        try
        {
            IsLoading = true;
            
            // Load customer data
            var customerResponse = await CustomerService.GetCustomerAsync(CustomerId);
            if (customerResponse.Success && customerResponse.Data != null)
            {
                Customer = customerResponse.Data;
                CustomerImages = Customer.Images.ToList();
            }

            // Load image count
            var countResponse = await ImageService.GetImageCountAsync(CustomerId);
            if (countResponse.Success && countResponse.Data != null)
            {
                var countData = countResponse.Data;
                var countProperty = countData.GetType().GetProperty("CurrentCount");
                if (countProperty != null)
                {
                    ImageCount = (int)countProperty.GetValue(countData)!;
                }
            }
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error loading customer data for customer {CustomerId}", CustomerId);
        }
        finally
        {
            IsLoading = false;
        }
    }

    private async Task OnImagesUploaded(List<CustomerImage> uploadedImages)
    {
        CustomerImages.AddRange(uploadedImages);
        await LoadCustomerData(); // Refresh to get updated data
        StateHasChanged();
    }

    private async Task OnImageCountChanged(int newCount)
    {
        ImageCount = newCount;
        StateHasChanged();
    }

    private async Task OnImageDeleted(CustomerImage deletedImage)
    {
        CustomerImages.Remove(deletedImage);
        ImageCount = Math.Max(0, ImageCount - 1);
        StateHasChanged();
    }

    private void EditCustomer()
    {
        if (Customer != null)
        {
            EditCustomerModel = new Customer
            {
                Id = Customer.Id,
                FirstName = Customer.FirstName,
                LastName = Customer.LastName,
                Email = Customer.Email,
                Phone = Customer.Phone
            };
            ShowEditModal = true;
        }
    }

    private void CloseEditModal()
    {
        ShowEditModal = false;
        EditCustomerModel = new Customer();
    }

    private async Task SaveCustomer()
    {
        try
        {
            IsSaving = true;
            
            var response = await CustomerService.UpdateCustomerAsync(EditCustomerModel);
            
            if (response.Success && response.Data != null)
            {
                Customer = response.Data;
                ShowEditModal = false;
                StateHasChanged();
            }
            else
            {
                Logger.LogError("Failed to update customer: {Message}", response.Message);
            }
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error updating customer {CustomerId}", CustomerId);
        }
        finally
        {
            IsSaving = false;
        }
    }

    private void NavigateToCustomers()
    {
        Navigation.NavigateTo("/customers");
    }
}
