@using ImageUploadWeb.Models
@using ImageUploadWeb.Services
@inject IImageService ImageService
@inject IJSRuntime JSRuntime
@inject ILogger<ImageGallery> Logger

<div class="image-gallery-container">
    @if (Images.Any())
    {
        <div class="gallery-header">
            <h5>Customer Images (@Images.Count)</h5>
            <div class="gallery-controls">
                <button class="btn btn-sm btn-outline-secondary" @onclick="ToggleViewMode">
                    @(IsGridView ? "Carousel View" : "Grid View")
                </button>
            </div>
        </div>

        @if (IsGridView)
        {
            <!-- Grid View -->
            <div class="image-grid">
                @foreach (var image in Images)
                {
                    <div class="image-item" @onclick="() => OpenImageModal(image)">
                        <img src="@GetImageDataUrl(image)" 
                             alt="@image.FileName" 
                             class="grid-image" />
                        <div class="image-overlay">
                            <div class="image-actions">
                                <button class="btn btn-sm btn-danger" 
                                        @onclick="() => DeleteImage(image.Id)" 
                                        @onclick:stopPropagation="true"
                                        title="Delete image">
                                    üóëÔ∏è
                                </button>
                            </div>
                        </div>
                        <div class="image-info">
                            <small>@image.FileName</small>
                        </div>
                    </div>
                }
            </div>
        }
        else
        {
            <!-- Carousel View -->
            <div class="image-carousel">
                <div class="carousel-container">
                    <button class="carousel-btn prev-btn" @onclick="PreviousImage" disabled="@(CurrentImageIndex == 0)">
                        ‚Äπ
                    </button>
                    
                    <div class="carousel-image-container">
                        <img src="@GetCurrentImageDataUrl()" 
                             alt="@GetCurrentImage()?.FileName" 
                             class="carousel-image" />
                        
                        <div class="carousel-info">
                            <h6>@GetCurrentImage()?.FileName</h6>
                            <p>@GetCurrentImage()?.Description</p>
                            <small>Uploaded: @GetCurrentImage()?.UploadedAt.ToString("MMM dd, yyyy HH:mm")</small>
                        </div>
                    </div>
                    
                    <button class="carousel-btn next-btn" @onclick="NextImage" disabled="@(CurrentImageIndex >= Images.Count - 1)">
                        ‚Ä∫
                    </button>
                </div>
                
                <div class="carousel-thumbnails">
                    @for (int i = 0; i < Images.Count; i++)
                    {
                        var index = i;
                        <img src="@GetImageDataUrl(Images[i])" 
                             alt="@Images[i].FileName" 
                             class="thumbnail @(i == CurrentImageIndex ? "active" : "")"
                             @onclick="() => GoToImage(index)" />
                    }
                </div>
                
                <div class="carousel-actions">
                    <button class="btn btn-danger btn-sm" @onclick="() => DeleteImage(GetCurrentImage()?.Id ?? 0)">
                        üóëÔ∏è Delete Current Image
                    </button>
                </div>
            </div>
        }
    }
    else
    {
        <div class="no-images">
            <i class="no-images-icon">üñºÔ∏è</i>
            <h5>No images uploaded yet</h5>
            <p>Upload some images to see them here</p>
        </div>
    }
</div>

<!-- Image Modal -->
@if (ShowImageModal && SelectedImage != null)
{
    <div class="image-modal" @onclick="CloseImageModal">
        <div class="modal-content" @onclick:stopPropagation="true">
            <button class="modal-close" @onclick="CloseImageModal">√ó</button>
            <img src="@GetImageDataUrl(SelectedImage)" 
                 alt="@SelectedImage.FileName" 
                 class="modal-image" />
            <div class="modal-info">
                <h5>@SelectedImage.FileName</h5>
                <p>@SelectedImage.Description</p>
                <small>Size: @FormatFileSize(SelectedImage.FileSizeBytes) | 
                       Uploaded: @SelectedImage.UploadedAt.ToString("MMM dd, yyyy HH:mm")</small>
            </div>
        </div>
    </div>
}

<style>
    .image-gallery-container {
        margin: 20px 0;
    }

    .gallery-header {
        display: flex;
        justify-content: space-between;
        align-items: center;
        margin-bottom: 20px;
        padding-bottom: 10px;
        border-bottom: 1px solid #dee2e6;
    }

    .gallery-header h5 {
        margin: 0;
        color: #333;
    }

    /* Grid View Styles */
    .image-grid {
        display: grid;
        grid-template-columns: repeat(auto-fill, minmax(200px, 1fr));
        gap: 15px;
    }

    .image-item {
        position: relative;
        border-radius: 8px;
        overflow: hidden;
        box-shadow: 0 2px 8px rgba(0,0,0,0.1);
        transition: transform 0.3s ease;
        cursor: pointer;
    }

    .image-item:hover {
        transform: translateY(-2px);
        box-shadow: 0 4px 12px rgba(0,0,0,0.15);
    }

    .grid-image {
        width: 100%;
        height: 150px;
        object-fit: cover;
        display: block;
    }

    .image-overlay {
        position: absolute;
        top: 0;
        left: 0;
        right: 0;
        bottom: 0;
        background: rgba(0,0,0,0.7);
        display: flex;
        align-items: center;
        justify-content: center;
        opacity: 0;
        transition: opacity 0.3s ease;
    }

    .image-item:hover .image-overlay {
        opacity: 1;
    }

    .image-actions {
        display: flex;
        gap: 10px;
    }

    .image-info {
        padding: 10px;
        background: white;
        border-top: 1px solid #dee2e6;
    }

    .image-info small {
        color: #666;
        word-break: break-all;
    }

    /* Carousel View Styles */
    .image-carousel {
        background: #f8f9fa;
        border-radius: 10px;
        padding: 20px;
    }

    .carousel-container {
        display: flex;
        align-items: center;
        justify-content: center;
        margin-bottom: 20px;
    }

    .carousel-btn {
        background: #007bff;
        color: white;
        border: none;
        border-radius: 50%;
        width: 40px;
        height: 40px;
        font-size: 20px;
        cursor: pointer;
        transition: background-color 0.3s ease;
        margin: 0 10px;
    }

    .carousel-btn:hover:not(:disabled) {
        background: #0056b3;
    }

    .carousel-btn:disabled {
        background: #6c757d;
        cursor: not-allowed;
    }

    .carousel-image-container {
        flex: 1;
        text-align: center;
        max-width: 600px;
    }

    .carousel-image {
        max-width: 100%;
        max-height: 400px;
        object-fit: contain;
        border-radius: 8px;
        box-shadow: 0 4px 12px rgba(0,0,0,0.15);
    }

    .carousel-info {
        margin-top: 15px;
        text-align: center;
    }

    .carousel-info h6 {
        margin: 5px 0;
        color: #333;
    }

    .carousel-info p {
        margin: 5px 0;
        color: #666;
    }

    .carousel-info small {
        color: #999;
    }

    .carousel-thumbnails {
        display: flex;
        justify-content: center;
        gap: 10px;
        margin-bottom: 20px;
        flex-wrap: wrap;
    }

    .thumbnail {
        width: 60px;
        height: 60px;
        object-fit: cover;
        border-radius: 4px;
        cursor: pointer;
        border: 2px solid transparent;
        transition: border-color 0.3s ease;
    }

    .thumbnail:hover {
        border-color: #007bff;
    }

    .thumbnail.active {
        border-color: #007bff;
        box-shadow: 0 0 0 2px rgba(0,123,255,0.25);
    }

    .carousel-actions {
        text-align: center;
    }

    /* No Images State */
    .no-images {
        text-align: center;
        padding: 40px;
        color: #666;
    }

    .no-images-icon {
        font-size: 3em;
        margin-bottom: 15px;
        display: block;
    }

    .no-images h5 {
        margin: 10px 0;
        color: #333;
    }

    /* Modal Styles */
    .image-modal {
        position: fixed;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        background: rgba(0,0,0,0.9);
        display: flex;
        align-items: center;
        justify-content: center;
        z-index: 1000;
    }

    .modal-content {
        position: relative;
        max-width: 90%;
        max-height: 90%;
        background: white;
        border-radius: 8px;
        overflow: hidden;
    }

    .modal-close {
        position: absolute;
        top: 10px;
        right: 15px;
        background: rgba(0,0,0,0.5);
        color: white;
        border: none;
        border-radius: 50%;
        width: 30px;
        height: 30px;
        font-size: 18px;
        cursor: pointer;
        z-index: 1001;
    }

    .modal-image {
        max-width: 100%;
        max-height: 70vh;
        object-fit: contain;
        display: block;
    }

    .modal-info {
        padding: 15px;
        background: white;
    }

    .modal-info h5 {
        margin: 0 0 10px 0;
        color: #333;
    }

    .modal-info p {
        margin: 5px 0;
        color: #666;
    }

    .modal-info small {
        color: #999;
    }

    /* Responsive Design */
    @@media (max-width: 768px) {
        .image-grid {
            grid-template-columns: repeat(auto-fill, minmax(150px, 1fr));
            gap: 10px;
        }

        .carousel-image {
            max-height: 300px;
        }

        .carousel-thumbnails {
            gap: 5px;
        }

        .thumbnail {
            width: 50px;
            height: 50px;
        }
    }
</style>

@code {
    [Parameter] public List<CustomerImage> Images { get; set; } = new();
    [Parameter] public EventCallback<CustomerImage> OnImageDeleted { get; set; }

    private bool IsGridView = true;
    private int CurrentImageIndex = 0;
    private bool ShowImageModal = false;
    private CustomerImage? SelectedImage = null;

    protected override void OnParametersSet()
    {
        if (Images.Any() && CurrentImageIndex >= Images.Count)
        {
            CurrentImageIndex = Images.Count - 1;
        }
    }

    private string GetImageDataUrl(CustomerImage image)
    {
        if (!string.IsNullOrEmpty(image.Base64Data))
        {
            return $"data:{image.ContentType};base64,{image.Base64Data}";
        }
        return image.FileUrl;
    }

    private string GetCurrentImageDataUrl()
    {
        var currentImage = GetCurrentImage();
        return currentImage != null ? GetImageDataUrl(currentImage) : string.Empty;
    }

    private CustomerImage? GetCurrentImage()
    {
        return Images.Any() && CurrentImageIndex >= 0 && CurrentImageIndex < Images.Count 
            ? Images[CurrentImageIndex] 
            : null;
    }

    private void ToggleViewMode()
    {
        IsGridView = !IsGridView;
    }

    private void PreviousImage()
    {
        if (CurrentImageIndex > 0)
        {
            CurrentImageIndex--;
        }
    }

    private void NextImage()
    {
        if (CurrentImageIndex < Images.Count - 1)
        {
            CurrentImageIndex++;
        }
    }

    private void GoToImage(int index)
    {
        if (index >= 0 && index < Images.Count)
        {
            CurrentImageIndex = index;
        }
    }

    private void OpenImageModal(CustomerImage image)
    {
        SelectedImage = image;
        ShowImageModal = true;
    }

    private void CloseImageModal()
    {
        ShowImageModal = false;
        SelectedImage = null;
    }

    private async Task DeleteImage(int imageId)
    {
        try
        {
            var response = await ImageService.DeleteImageAsync(imageId);
            
            if (response.Success)
            {
                var imageToRemove = Images.FirstOrDefault(i => i.Id == imageId);
                if (imageToRemove != null)
                {
                    Images.Remove(imageToRemove);
                    
                    // Adjust current index if needed
                    if (CurrentImageIndex >= Images.Count && Images.Any())
                    {
                        CurrentImageIndex = Images.Count - 1;
                    }
                    else if (!Images.Any())
                    {
                        CurrentImageIndex = 0;
                    }
                    
                    await OnImageDeleted.InvokeAsync(imageToRemove);
                    StateHasChanged();
                }
            }
            else
            {
                Logger.LogError("Failed to delete image {ImageId}: {Message}", imageId, response.Message);
            }
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error deleting image {ImageId}", imageId);
        }
    }

    private string FormatFileSize(long bytes)
    {
        string[] sizes = { "B", "KB", "MB", "GB" };
        double len = bytes;
        int order = 0;
        while (len >= 1024 && order < sizes.Length - 1)
        {
            order++;
            len = len / 1024;
        }
        return $"{len:0.##} {sizes[order]}";
    }

    public void RefreshImages(List<CustomerImage> newImages)
    {
        Images = newImages;
        if (CurrentImageIndex >= Images.Count && Images.Any())
        {
            CurrentImageIndex = Images.Count - 1;
        }
        StateHasChanged();
    }
}
